@page "/nekopage/{pageId}"
@rendermode InteractiveServer

@inject NekoClient nekoClient
@inject NavigationManager nav
@inject WalletClient walletClient

<PageTitle>Подробности</PageTitle>

@if (nekoPost is null)
{
	<h2 class="alert-heading">Ошибка!</h2>
	<h3 class="alert alert-danger" role="alert">Данной страницы не существует</h3>
	<img src="https://upload.wikimedia.org/wikipedia/commons/3/39/Breadindia.jpg" alt="ЭЭЭЭЭЭЭЭЭЭЭ" style="height: 50vh;" />
}
else
{
	<div class="card mb-4 mh-50 box-shadow">
		<div class="card-header" style="display: flex; flex-direction: column;">
			<div style="display: flex; justify-content:start">
				<img style="height: 25vw; padding: 1vh" src="@nekoPost.Image" alt="ЭЭЭЭЭЭЭЭЭЭЭ" />
				<div style="display: flex; flex-direction: column; justify-content: space-between">
					<button 
						style="height: 12vh; width: 20vw; margin: 1vh; margin-left: 4vw; font-size: 4vh; line-height: 10vh;"
						class="btn btn-outline-secondary" 
						@onclick="Buy">КУПИТЬ</button>
					<a  
						style="height: 12vh; width: 20vw; margin: 1vh; margin-left: 4vw; font-size: 4vh; line-height: 10vh;"
					    class="btn btn-outline-secondary" 
						@onclick="()=>NavTo(nekoPost.Id)">Назад</a>
					<a 
						style="height: 12vh; width: 20vw; margin: 1vh; margin-left: 4vw; font-size: 4vh; line-height: 10vh;"
					    class="btn btn-outline-secondary" 
						href="/nekopage/@NextId(nekoPost.Id)">Следом</a>
				</div>
			</div>
			<h3 class="text-primary" style="margin: 2vh">@nekoPost.Name</h3>
		</div>

		<div class="card-body">
			<p>Цена: @nekoPost.Price₽</p>
			<ul>
				@foreach(var spec in nekoPost.Specifications)
				{
					<li>@spec.Key - @spec.Value</li>
				}
			</ul>
			<p>@nekoPost.Description</p>
		</div>

		<div class="photo-scroll-container card-footer">
			<div class="photo-scroll-content">
				@foreach (string photo in nekoPost.Photos)
				{
					@if (photo.StartsWith("http"))
					{
						<a href="@photo">
							<img src="@photo" alt="ЭЭЭЭЭ" style="height: 25vh; margin: 0.5vw">
						</a>
					}
					else
					{
						<img src="@photo" alt="ЭЭЭЭЭ" style="height: 25vh; margin: 0.5vw">
					}
				}
			</div>
		</div>
	</div>
}


@code {
	[Parameter]
	public required string pageId { get; set; }

	private NekoPost? nekoPost = null;
	private NekoPost[]? nekos = null;

	protected override void OnInitialized()
	{
		switch (nekoClient.UrlWas)
		{
			case "cart":
				nekos = nekoClient.GetCart(); break;
			case "liked":
				nekos = nekoClient.GetLiked(); break;
			default:
				nekos = nekoClient.GetNekos(); break;
		}
		nekoPost = nekos.FirstOrDefault(n => n.Id == Convert.ToInt32(pageId));
	}

	private int NextId(int id)
	{
		if (nekos!.Length == 1)
			return id;
		if (nekos.Last().Id == id)
			return nekos[0].Id;
		if (id == nekos[0].Id)
			return nekos[1].Id;
		return (nekos!.SkipWhile(n => n.Id != nekoPost!.Id).Skip(1).ToArray().ElementAtOrDefault(0) ?? nekos[0]).Id;
	}

	private void Buy() 
	{
		walletClient.Account -= nekoPost!.Price;
		if (!nekoClient.GetCart().Any(c => c.Id == nekoPost!.Id))
		{
			nekoClient.AddToCart(nekoPost);
			nekoClient.DeletePost(nekoPost!.Id);
		}
		NavTo(nekoPost.Id);
	}

	private void NavTo(int id)
	{
		switch (nekoClient.UrlWas)
		{
			case "cart":
				nav.NavigateTo("/cart"); break;
			case "liked":
				nav.NavigateTo("/liked"); break;
			default:
				nav.NavigateTo("/"); break;
		}
	}
}
